<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
		   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="teamproject3.team3.mapper.MemberMapper">

	<select id="getGenre" resultType="genreVO">
		select genre_id genreid, name genrename from genre
	</select>
	
	<insert id="insertmember" parameterType="String">
		insert into member(member_id, password, gender, birth_date)
		values
		(#{ memberId }, #{ passwd }, #{ sex }, #{ year } '-' #{ month } '-' #{ day })
	</insert>
	
	<insert id="insertgenre" parameterType="MemberGenreVO">
		insert into member_genre (member_id, genre_id)
		values
		<foreach collection="list" item="item" separator=",">
		(#{ item.memberId }, #{ item.genreId })
		</foreach>
	</insert>
	
	<select id="idcheck" resultType="int">
		select count(*)
		from member
		where member_id = '${ memberId }' 
	</select>
	
	<select id="login" resultType="memberVO">
		select m.member_id memberId, m.gender,m.birth_date, m.user_type usertype
		from member m 
		where m.member_id = '${ memberId }'
		and m.password = '${ passwd }'
	</select>
	
	<select id="pwdcheck" resultType="int">
		select count(*)
		from member
		where member_id = '${ memberId }'
		and password = '${ passwd }'
	</select>
	
	<select id="findtop10" resultType="movieVO">
		select movie_id, title, vote_average ,posterpath 
		from movie 
		where posterpath not like '' and vote_count >10000 
		order by vote_average desc  
		limit 10;
	</select>
	
	<select id="findpop" resultType="movieVO">
		select movie_id, title, vote_average ,posterpath 
		from movie 
		where posterpath not like '' and vote_count >10 and original_language = 'ko' or original_language = 'en'
		order by popularity desc  
		limit 20;
	</select>
	
	<select id="prmovie" resultType="movieVO">
		select movie_id, title, posterpath, release_date, overview
		from movie
		where original_language = 'ko'
		and release_date  &lt; '2021-11-30'
		order by release_date desc
		limit 4;
	</select>
	
	<select id="findusergenre" resultType="genreVO">
		select g.genre_id genreid, g.name genrename
		from member_genre mg
		join genre g on(g.genre_id = mg.genre_id)
		where mg.member_id = '${ memberId }'
	</select>
	
	<select id="findjjimlist" resultType="jjimVO">
		select m.title, m.movie_id
		from jjim j
		join movie m 
		on (m.movie_id = j.movie_id)
		where j.member_id = '${ memberId }'
	</select>
	
	<update id="updatepwd" parameterType="String">
		update member
		set password = '${ npd }'
		where member_id = '${ memberId }'
	</update>
	
	<select id="membercheck" resultType="memberVO">
		select member_id memberId, birth_date, join_date, user_type usertype, gender
		from member
	</select>
	
	<update id="updateuser" parameterType="memberVO">
		update member
		set user_type = '${ usertype }'
		where member_id = '${ memberId }'
	</update>
	
	<delete id="deletegenre" parameterType="memberVO">
		delete from member_genre
		where member_id = '${ memberId }'
	</delete>
	
	<delete id="deleteuser" parameterType="memberVO">
		delete from member
		where member_id ='${ memberId }'
	</delete>
</mapper>